#! /usr/bin/make -rRf
#?
#? DESCRIPTION
#?      For more details please see
#?          ../Makefile  Makefile  Makefile.help  Makefile.pod
#?      make help.test.misc
#?
#? VERSION
#?      @(#) Makefile.misc 1.46 20/10/14 21:56:40
#?
#? AUTHOR
#?      18-apr-18 Achim Hoffmann
#?
# -----------------------------------------------------------------------------

HELP-help.test.misc = targets for misc. tests and development

_SID.misc          := 1.46

_MYSELF.misc       := t/Makefile.misc
ALL.includes       += $(_MYSELF.misc)
ALL.inc.type       += misc
ALL.help.tests     += help.test.misc

ifeq (,$(_SID.test))
    -include t/Makefile
endif

first-misc-target-is-default: help.test.misc

help.test.misc:       HELP_TYPE = misc
help.test.misc-v:     HELP_TYPE = misc
help.test.misc-vv:    HELP_TYPE = misc

#_____________________________________________________________________________
#________________________________________________________________ variables __|

# internal used tools and files (paths hardcoded!)
EXE.bench          := t/o-saft_bench.sh
EXE.test.bunt      := t/test-bunt.pl.txt
TEST.args.misc     := +quit
TEST.bench.times   := $(EXE.bench).times
TEST.bench.host    := $(TEST.host)

TEST.opt.cloc      :=
EXE.cloc           := cloc $(TEST.opt.cloc)

ifndef CONTRIB.dir
    CONTRIB.dir = contrib
endif

#_____________________________________________________________________________
#____________________________________________________________ various tests __|

HELP-_misc1         = ____________________________________________ testing misc. _
HELP-test.bench     = call '$(EXE.bench)' for some benchmarks
HELP-test.bench.log = call '$(EXE.bench)' and save result in '$(TEST.bench.times)'
HELP-test.bunt      = test '$(CONTRIB.dir)/bunt.pl' with sample file

HELP.misc           = $(_NL)\
\# Make may return status code for any  qa.*  target, even the result is not$(_NL)\
\# errorneous. The target  test.quality  is not part of '\$$(ALL.test.misc)'.

HELP.test.misc.all  = # no special documentation yet

bench: test.bench
test.bench:
	@$(TRACE.target)
	$(EXE.bench) $(TEST.bench.host)
	@echo "# use '$(MAKE_COMMAND) test.bench.log' to save result in '$(TEST.bench.times)'"
test.bench.log:
	@$(TRACE.target)
	@$(TRACE.target.log)
	$(EXE.bench) $(TEST.bench.host) >> $(TEST.bench.times)

test.bunt: $(EXE.test.bunt)
	@$(TRACE.target)
	-cat $(EXE.test.bunt) | $(CONTRIB.dir)/bunt.pl

ALL.testmisc       := test.bench test.bunt
ALL.testmisc.log   := test.bench.log
ALL.test.misc.log  += test.bench.log

.PHONY: test.bench test.bench.log test.bunt

#_____________________________________________________________________________
#__________________________________________________ targets for development __|

HELP-_cloc      = ________________________________________ statistic targets _
HELP-cloc       = count lines of code of all source files; summary output
HELP-cloc.file  = count lines of code of all source files; output by file
HELP-cloc.lang  = same as cloc.file and cloc
# NOTE: also possible usage:
#       make cloc TEST.opt.cloc=--3
#       make cloc TEST.opt.cloc=--csv
#       make cloc TEST.opt.cloc=--xml
# NOTE: --quiet suppresses count of files also, hence not used by default
cloc%:
	@$(TRACE.target)
	@$(EXE.cloc) $(sort $(ALL.src))

cloc.stat:  TEST.opt.cloc  +=
cloc.file:  TEST.opt.cloc  += --by-file
cloc.lang:  TEST.opt.cloc  += --by-file-by-lang
cloc:       cloc.stat

ALL.test.cloc  := cloc.stat cloc.file cloc.lang
ALL.testmisc   += $(ALL.test.cloc)
test.cloc:        $(ALL.test.cloc)
# TODO: test.cloc.log  must be special at it compares generated tags files

.PHONY: cloc

HELP-_dev1          = __________________________________ targets for development _
HELP-test.norc      = special target testing with/without -norc option
HELP-tags           = generate tags file for vi(m)
HELP-profile.sub.entry  = generate function calling tree of '$(DEV.pl)' (entry only)
HELP-profile.sub.exit   = generate function calling tree of '$(DEV.pl)' (entry and exit)
HELP-profile.sub.args   = generate function calling tree of '$(DEV.pl)' (in, out and parameter)
HELP-nytprof.out    = generate profiling data (for nytprofcalls)
HELP-nytprof.html   = generate profiling data in HTML format
HELP-dprof.out      = generate profiling data (for dprofpp; times, counts, calling tree)

$(GEN.tags): $(SRC.pl) $(ALL.pm) $(CHK.pl) $(SRC.cgi) $(SRC.tcl) $(ALL.Makefiles)
	ctags $^

ALL.gen        += $(GEN.tags)
#               # just because GEN.tags is defined in main Makefile

ALL.testmisc   += $(GEN.tags)

# check if result of +check and +info is identical with and without --no-rc
# commands LIST.norc.no-out.keys are ignored as they always differ
TEST.norc.host := localhost
_TEST.norc.dir  = $(TEST.logdir)/test.norc
LIST.norc.no-out.keys   := master_key \
                           session_id session_id_ctx \
                           session_startdate session_starttime session_ticket \
                           sts_expired \
                           http_body https_body pem text
LIST.norc.no-out.opt    := $(LIST.norc.no-out.keys:%=--no-out=%)
LIST.norc.opts          := --header --traceKEY
test.norc%:
	@$(TRACE.target)
	@$(eval _cmd = $(shell echo $* | sed -e 's/.log//'))
	@$(eval _log = $(_TEST.norc.dir)-$(_cmd))
	@$(eval _ext = log-$(TEST.today))
	@$(DEV.pl) $(TEST.norc.host) $(_cmd) $(LIST.norc.no-out.opt) $(LIST.norc.opts)         | sort > $(_log).$(_ext)
	@$(DEV.pl) $(TEST.norc.host) $(_cmd) $(LIST.norc.no-out.opt) $(LIST.norc.opts) --no-rc | sort > $(_log)--no-rc.$(_ext)
	@-diff $(_log).$(_ext) $(_log)--no-rc.$(_ext) || exit 0
	@rm    $(_log).$(_ext) $(_log)--no-rc.$(_ext)

ALL.testmisc   += test.norc+info test.norc+check
# TODO: test.norc%.log  NOT YET IMPLEMENTED

# TODO: Profiling should go to Makefile.profile or alike
# SEE Make:Profiling
# SEE Make:profile.sub
# SEE Make:profile.sub*_%
# SEE Make:profile.sub% target rule

_TEST.profile.log   = $(TEST.logdir)/profile.sub.log

TEST.profile.host  := localhost
profile.sub.entry:      PERL.OPTS   = PERLDB_OPTS='NonStop=1 frame=1'
profile.sub.entry_%:    PERL.OPTS   = PERLDB_OPTS='NonStop=1 frame=1'
profile.sub.exit:       PERL.OPTS   = PERLDB_OPTS='NonStop=1 frame=2'
profile.sub.exit_%:     PERL.OPTS   = PERLDB_OPTS='NonStop=1 frame=2'
profile.sub.args:       PERL.OPTS   = PERLDB_OPTS='NonStop=1 frame=15'
profile.sub.args_%:     PERL.OPTS   = PERLDB_OPTS='NonStop=1 frame=15'

# pattern rules can contain one % only, hence following sequence for _lineinfo is mandatory
profile.sub.%:          _lineinfo   = LineInfo=$(_TEST.profile.log)
profile.sub.%.log:      _lineinfo   = LineInfo=$(_TEST.profile.log)

profile.sub.entry.log:  PERL.OPTS   = PERLDB_OPTS='NonStop=1 frame=1  $(_lineinfo)'
profile.sub.exit.log:   PERL.OPTS   = PERLDB_OPTS='NonStop=1 frame=2  $(_lineinfo)'
profile.sub.args.log:   PERL.OPTS   = PERLDB_OPTS='NonStop=1 frame=15 $(_lineinfo)'
profile.sub.entry.log%: PERL.OPTS   = PERLDB_OPTS='NonStop=1 frame=1  $(_lineinfo)'
profile.sub.exit.log%:  PERL.OPTS   = PERLDB_OPTS='NonStop=1 frame=2  $(_lineinfo)'
profile.sub.args.log%:  PERL.OPTS   = PERLDB_OPTS='NonStop=1 frame=15 $(_lineinfo)'

profile.sub%:
	@$(TRACE.target)
	@$(eval _args   = $(shell echo "$*" | awk -F_ '{i=1;while(i<NF){i++;print $$i}}'))
	@$(eval my.args = $(shell [ -n "$(_args)" ] && echo $(_args) || echo $(TEST.args.misc) ))
	-env $(PERL.OPTS) perl -dS $(DEV.pl) $(TEST.profile.host) $(my.args) 2>&1 

# TODO: 
#     make profile.sub.entry | sed -e 's/ entering //'
#     make profile.sub.exit  | sed -e 's/ entering /+/' -e 's/exited / -/'
#     make profile.sub.args  | sed -e 's/ in  /+/' -e 's/out / -/' -e 's/ from .*\//\t/'
# better use dprof.out below

# requires perl module Devel/NYTProf or package, for example libdevel-nytprof-perl
_TEST.nytprof.log   = $(TEST.logdir)/nytprof.out
nytprof.out: $(_TEST.nytprof.log)
	@$(TRACE.target)
	@perl -d:NYTProf $(DEV.pl) $(TEST.profile.host) $(TEST.args.misc)
	@mv $@ $<
	@echo "# inspect with: nytprofcalls $(_TEST.nytprof.log)"
nytprof.html: $(_TEST.nytprof.log)
	@$(TRACE.target)
	@nytprofhtml --file $<
	@echo "# inspect with: firefox $(TEST.dir)/nytprof/index.html"
nytprof: nytprof.html

# requires perl module Devel/DProf or package, for example libdevel-dprof-perl
_TEST.dprof.log     = $(TEST.logdir)/dprof.out
$(_TEST.dprof.log):
	@$(TRACE.target)
	@env PERL_DPROF_OUT_FILE_NAME=$(_TEST.dprof.log) perl -d:DProf $(DEV.pl) $(TEST.profile.host) $(TEST.args.misc)
	@dprofpp    $(_TEST.dprof.log)
	@echo ""
	@echo "# show calling tree: dprofpp -t $(_TEST.dprof.log)"
#dprof.out: PERL_DPROF_OUT_FILE_NAME=$(_TEST.dprof.log)
dprof.out: $(_TEST.dprof.log)
# useful options: -T -I
# dprofpp -t -f "(Carp::)|(Exporter::)|(Symbol::)|(DynaLoader::)"
.PHONY: $(_TEST.dprof.log)

# TODO: define summary macro for all profile targets
ALL.test.profile   := \
	profile.sub.entry \
	profile.sub.exit \
	profile.sub.args \
	nytprof.out \
	nytprof.html \
	dprof.out
ALL.testmisc   += $(ALL.test.profile)
test.profile:     $(ALL.test.profile)

ALL.qa          = $(ALL.pm) $(SRC.pl)

HELP-_qa1           = ____________________________ targets checking code quality _
HELP-test.quality   = search for various common coding mistakes, see make e-ALL.test.quality
HELP-test.pod   = check generated pod file

qa.pod:
	@echo "#make: $(HELP-test.pod) ..."
	@-podchecker $(GEN.pod)
	@echo ""

# following checks based on http://perldoc.perl.org/perldiag.html
# NOTE: all qa.* targets never fail, they are just informational
#       therefore if egrep fails, "echo OK" is used to avoid failure
qa.double_dref:
	@echo "#make: check depricated double dereferencing ..."
	@-egrep -H '\$$$$[^$$)]'    $(ALL.qa)   || echo "OK"
	@echo ""
qa.defined_arr:
	@echo "#make: check depricated defined(@array) ..."
	@-egrep -H 'defined[( ]*@' $(ALL.qa)    || echo "OK"
	@echo ""
qa.defined_hash:
	@echo "#make: check depricated defined(%hash) ..."
	@-egrep -H 'defined[( ]*%' $(ALL.qa)    || echo "OK"
	@echo ""
qa.defined_warnings:
	@echo "#make: check duplicate error and warning numbers ..."
	@$(MAKE_COMMAND) warnings.info | sort -k 2 \
	| awk '{nr=$$2;sub(/:/,"",nr);if(nr==last){print warn;print;}last=nr;warn=$$0}'
	@echo ""

qa.misspelled_regex:
	@echo "#make: check misspelled grouping in RegEx ..."
	@-egrep -H '\(:\?'         $(ALL.qa)    || echo "OK"
	@echo ""
qa.misspelled_critic:
	@echo "#make: check misspelled use of ## no critic ..."
	@-egrep -H ' # no critic'  $(ALL.qa)    || echo "OK"
	@echo ""

# some simple checks for Makefiles
qa.makefile_HELP:
	@echo "#make: check HELP- macro definitions in Makefiles ..."
	@-awk '/^HELP-/{print $$1"\t"FILENAME}' $(ALL.Makefiles)    | sort
	@echo ""
	@echo "#make: check duplicate HELP- macro definitions in Makefiles ..."
	@-awk '/^HELP-/{print $$1}' $(ALL.Makefiles)                | sort | uniq -d
	@echo ""
qa.makefile_help:
	@echo "#make: check help target definitions in Makefiles ..."
	@-awk '/^help/{print $$1"\t"FILENAME}' $(ALL.Makefiles)     | sort
	@echo ""
	@echo "#make: check duplicate help target definitions in Makefiles ..."
	@-awk '($$3=="="){next}/^help/{print $$1}' $(ALL.Makefiles) | sort | uniq -d
	@echo ""
#       # duplicate checks for targets need to avoid collecting the conditional
#       # targets which just define macros, hence $3=="=" 
ALL.test.quality   := \
		qa.pod \
		qa.double_dref \
		qa.defined_arr \
		qa.defined_hash \
		qa.defined_warnings \
		qa.misspelled_regex \
		qa.misspelled_critic \
		qa.makefile_HELP \
		qa.makefile_help
ALL.testmisc       += $(ALL.test.quality)
test.quality:         $(ALL.test.quality)

_TEST.quality.log   = $(TEST.logdir)/test.quality.log-$(TEST.today)
$(_TEST.quality.log):
	@echo "# Makefile.misc 1.46: $(MAKE) test.quality.log" > $@
	@$(MAKE) -i test.quality >> $@ 2>&1
test.quality.log: $(_TEST.quality.log)
	@$(TRACE.target)
	@$(TRACE.target.log)
	@diff $(TEST.logdir)/$@ $(_TEST.quality.log) \
	    && rm $(_TEST.quality.log) \
	    || mv $(_TEST.quality.log) $(TEST.logdir)/$@
	@-test -f $(TEST.logdir)/$@  ||  mv $(_TEST.quality.log) $(TEST.logdir)/$@
	@ls -l  $(TEST.logdir)/$@*
# TODO: same target as test.warnings.log

HELP-test.misc.todo = search for 'FIXME' and 'TODO' comments in '$(ALL.qa)'
testarg-misc_FIXME:
	@echo "#make: search for '# FIXME' in code ..."
	@-grep '# FIXME'            $(ALL.qa)
	@echo ""
testarg-misc_TODO:
	@echo "#make: search for '# TODO' in code ..."
	@-grep '# TODO'             $(ALL.qa)
	@echo ""
ALL.test.misc.todo     := testarg-misc_FIXME testarg-misc_TODO
ALL.test.misc.todo.log := $(ALL.test.misc.todo:%=%.log)
ALL.testmisc           += $(ALL.test.misc.todo)
test.misc.todo:           $(ALL.test.misc.todo)
test.misc.todo.log:       $(ALL.test.misc.todo.log)
	@$(TRACE.target)
.PHONY: $(ALL.test.misc.log)

ALL.test.misc      += test.bench test.bunt test.norc \
			$(ALL.test.cloc) \
			$(ALL.test.quality) \
			$(ALL.test.misc.todo) \
			$(GEN.tags)
ALL.test.misc.log  += test.quality.log $(ALL.test.misc.todo.log)
    # NOTE: ALL.test.misc does not contain $(ALL.testmisc) because they are too noisy

test.misc.all:      $(ALL.testmisc)
test.misc:          $(ALL.test.misc)
test.misc.log:      $(ALL.test.misc.log)
    # test.log-compare-hint does not make sense here
